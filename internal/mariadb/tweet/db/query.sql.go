// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const getTweetsOfFollowed = `-- name: GetTweetsOfFollowed :many
select username, first_name, last_name, tweet_text, publication_date
from followers join tweets
    on followers.followed_to_id = tweets.posted_by_id
join users
    on tweets.posted_by_id = users.id
where follower_id = ?
order by publication_date DESC
limit ? offset ?
`

type GetTweetsOfFollowedParams struct {
	FollowerID int64
	Limit      int32
	Offset     int32
}

type GetTweetsOfFollowedRow struct {
	Username        string
	FirstName       string
	LastName        string
	TweetText       string
	PublicationDate time.Time
}

func (q *Queries) GetTweetsOfFollowed(ctx context.Context, arg GetTweetsOfFollowedParams) ([]GetTweetsOfFollowedRow, error) {
	rows, err := q.db.QueryContext(ctx, getTweetsOfFollowed, arg.FollowerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTweetsOfFollowedRow{}
	for rows.Next() {
		var i GetTweetsOfFollowedRow
		if err := rows.Scan(
			&i.Username,
			&i.FirstName,
			&i.LastName,
			&i.TweetText,
			&i.PublicationDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
